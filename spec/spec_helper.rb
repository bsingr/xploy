# this must before application code is required
require 'coveralls'
Coveralls.wear!

module RSpecProfiler
  def self.setup
    @setup = true
    require 'ruby-prof'
    system 'mkdir -p tmp/performance'
  end

  def self.profile example
    setup unless @setup
    result = RubyProf.profile { example.run }
    name = example.metadata[:full_description].downcase.gsub(/[^a-z0-9_-]/, "-").gsub(/-+/, "-")
    printer = RubyProf::GraphHtmlPrinter.new(result)
    open("tmp/performance/callgrind.#{name}.#{Time.now.to_i}.html", "w") do |f|
      printer.print(f)
    end
  end
end

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'
 
  config.around(:each) do |example|
    if example.metadata[:profile]
      RSpecProfiler.profile(example)
    end
  end
end

# just add the lib folder to the load path
# -> actual 'require' calls will be done within each spec (speed + modularity)
lib = File.expand_path('../lib', File.dirname(__FILE__))
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

ASSETS_PATH = File.expand_path('assets', File.dirname(__FILE__))
